{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","element","Alert","height","alert","word","lowerCase","charAt","slice","capitalFont","msg","App","setMode","setAlert","message","setTimeout","body","about","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2698999c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}> \r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    about : PropTypes.string\r\n}\r\n\r\n// Navbar.defaultProps = {\r\n//     title : 'Set title here',\r\n//     about : 'About'\r\n// }","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"You have clicked Handle Up click Button\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"! Text has been converted to upper case!!\", \"success\")\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"You have clicked Handle Up click Button\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"! Text has been converted to lower case!!\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let copyText = document.getElementById('exampleFormControlTextarea1');\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"! Text has been Copied!!\", \"success\")\r\n    }\r\n\r\n    const handleClearText = ()=>{\r\n        setText('');        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container mb-3\" style = {{color : props.mode === 'dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control my-3\" id=\"exampleFormControlTextarea1\" onChange={handleOnChange} value={text} style = {{backgroundColor : props.mode === 'dark'?'#6a679b':'white', color : props.mode === 'dark'?'white':'black'}} rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick} >Convert to Upper Case</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLoClick} >Convert to Lower Case</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy} >Copy Text</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearText} >Clear Text</button>\r\n        </div>\r\n        <div className=\"container mb-3\" style = {{color : props.mode === 'dark'?'white':'black'}}>\r\n            <h1>Your text Summary</h1>\r\n            <p><b>{text.split(/\\s+/).filter((element)=>{return element.length!=0}).length}</b> words <b>{text.length}</b> characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minute read </p>\r\n            <h3>Your text Preview</h3>\r\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nconst capitalFont = (word)=>{\r\n    let lowerCase = word.toLowerCase();\r\n    return lowerCase.charAt(0).toUpperCase() + lowerCase.slice(1);\r\n}\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{height : '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalFont(props.alert.type)}</strong> {props.alert.msg}\r\n        </div>}\r\n    </div>)\r\n}\r\n\r\nexport default Alert;\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n        msg : message,\n        type : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#141442';\n      showAlert(\"! Dark mode has been applied!!\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"! Light mode has been applied!!\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={mode} toggleMode ={toggleMode}/>\n      <Alert alert = {alert}/>\n      {/* <Navbar /> */}\n      <div className=\"container\">\n        {/* <Switch>\n           <Route exact path=\"/about\">    {/* means perfect match not a partial matching. Its a good method to practise*/}\n            {/* <About mode={mode} toggleMode ={toggleMode}/>\n          </Route>\n          <Route exact path=\"/\">  */} \n            <TextForm showAlert = {showAlert} heading=\"Enter the text to analyze\" mode={mode} toggleMode ={toggleMode}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* <br />\n    </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}